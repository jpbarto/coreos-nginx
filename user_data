#cloud-config

coreos:

  update:
    reboot-strategy: "best-effort"

  etcd2:
    # multi-region and multi-cloud deployments need to use $public_ipv4
    # initial-advertise-peer-urls: http://$private_ipv4:2380
    # listen-peer-urls: http://$private_ipv4:2380,http://$private_ipv4:7001
    # listen on both the official ports and the legacy ports
    # legacy ports can be omitted if your application doesn't depend on them
    # listen-client-urls: http://0.0.0.0:2379,http://0.0.0.0:4001
    # advertise-client-urls: http://$private_ipv4:2379,http://$private_ipv4:4001
    # initial_cluster_state: new
    # initial_cluster: default=http://$private_ipv4:2380
    force_new_cluster: true

  units:
    - name: etcd2.service
      command: start
      enable: true
    - name: docker.service
      command: start
      enable: true
    - name: docker-tcp.socket
      command: start
      enable: true
      content: |
        [Unit]
        Description=Docker Socket for the API

        [Socket]
        ListenStream=127.0.0.1:2375
        BindIPv6Only=both
        Service=docker.service

        [Install]
        WantedBy=sockets.target
    - name: fleet.service
      command: start
      enable: true
    - name: registrator.service
      command: start
      content: |
        [Unit]
        Description=Container registrator
        After=docker.service
        Requires=docker.service

        [Service]
        Restart=always
        ExecStartPre=-/usr/bin/docker kill registrator
        ExecStartPre=-/usr/bin/docker rm registrator
        ExecStartPre=/usr/bin/docker pull gliderlabs/registrator
        ExecStart=/usr/bin/docker run --name registrator --net host -v /var/run/docker.sock:/tmp/docker.sock gliderlabs/registrator -internal=true etcd://localhost:2379/haproxy-discover/services
        ExecStop=/usr/bin/docker stop registrator
    - name: haproxy-confd.service
      command: start
      content: |
        [Unit]
        Description=ConfD configured HAProxy
        After=docker.service
        Requires=docker.service
        After=registrator.service
        Requires=registrator.service

        [Service]
        Restart=always
        ExecStartPre=-/usr/bin/docker kill haproxy-confd
        ExecStartPre=-/usr/bin/docker rm haproxy-confd
        ExecStartPre=/usr/bin/docker pull treehau5/haproxy-confd
        ExecStart=/usr/bin/docker run --name haproxy-confd --net host -v /var/confd:/etc/confd -e 'ETCD_ADDR=localhost:2379' -p 80:80 treehau5/haproxy-confd
        ExecStop=/usr/bin/docker stop haproxy-confd
    - name: nginx.service
      command: start
      content: |
        [Unit]
        Description=NGINX Web Server
        After=docker.service
        Requires=docker.service
        After=registrator.service
        After=haproxy-confd.service
        Requires=haproxy-confd.service

        [Service]
        Restart=always
        ExecStartPre=-/usr/bin/docker kill www_1
        ExecStartPre=-/usr/bin/docker rm www_1
        ExecStartPre=/usr/bin/docker pull nginx
        ExecStart=/usr/bin/docker run --name www_1 -v /var/www/default/html:/usr/share/nginx/html nginx
        ExecStop=/usr/bin/docker stop www_1

write_files:
  - path: "/etc/issue"
    permissions: "0644"
    owner: "root"
    content: |
      This system is the property of its owner and is intended for authorized users only.  
      Unauthorized used of this system is prohibited.
  - path: "/etc/profile.d/umask.sh"
    permissions: "0744"
    owner: "root"
    content: |
      umask 027
  - path: "/etc/profile.d/tmout.sh"
    permissions: "0744"
    owner: "root"
    content: |
      export TMOUT=300
